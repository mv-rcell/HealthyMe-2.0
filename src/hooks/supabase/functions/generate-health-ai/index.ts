
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import "https://deno.land/x/xhr@0.1.0/mod.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const { type, ...data } = await req.json()
    
    const openAIApiKey = Deno.env.get('OPENAI_API_KEY')
    if (!openAIApiKey) {
      throw new Error('OpenAI API key not configured')
    }

    let prompt = ''
    
    switch (type) {
      case 'workout':
        prompt = `Create a personalized workout plan based on these preferences: ${data.preferences}. 
        Provide a detailed weekly schedule with exercises, sets, reps, and rest periods.`
        break
        
      case 'vitals':
        prompt = `Analyze these vital signs and provide health insights: ${JSON.stringify(data.vitals)}. 
        Include any recommendations or areas of concern, but clarify this is not medical advice.`
        break
        
      case 'checkup':
        prompt = `Based on this health profile: ${JSON.stringify(data.healthProfile)}, 
        suggest appropriate medical checkups and screening schedules. Include preventive care recommendations.`
        break
        
      case 'specialist-recommendation':
        prompt = `Based on these symptoms/goals: "${data.symptoms}", 
        recommend the most suitable specialists from this list: ${JSON.stringify(data.availableSpecialists)}. 
        Explain why each specialist would be helpful and prioritize them.`
        break
        
      case 'care-plan-recommendation':
        prompt = `Create a comprehensive care plan for someone with these health goals: "${data.healthGoals}" 
        and current conditions: "${data.currentConditions}". Include lifestyle recommendations, 
        monitoring suggestions, and timeline milestones.`
        break
        
      case 'symptoms-recommendation':
        prompt = `Analyze these symptoms: "${data.symptoms}" and provide general health guidance. 
        Include when to seek medical attention, possible causes (educational only), and self-care tips. 
        Always emphasize consulting healthcare professionals for proper diagnosis.`
        break
        
      default:
        throw new Error('Unknown AI request type')
    }

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: `You are a helpful AI health assistant. Provide informative, personalized guidance while always emphasizing that your suggestions are educational and not a substitute for professional medical advice. Be encouraging and supportive while maintaining appropriate medical disclaimers.`
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 1000,
        temperature: 0.7
      })
    })

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.statusText}`)
    }

    const aiResponse = await response.json()
    const content = aiResponse.choices[0]?.message?.content

    if (!content) {
      throw new Error('No content generated by AI')
    }

    // Return different response formats based on type
    const result = type === 'workout' ? { plan: content } :
                  type === 'vitals' ? { analysis: content } :
                  type === 'checkup' ? { suggestion: content } :
                  { recommendation: content }

    return new Response(JSON.stringify(result), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })

  } catch (error) {
    console.error('Error in generate-health-ai function:', error)
    return new Response(JSON.stringify({ 
      error: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
  }
})